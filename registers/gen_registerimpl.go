// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package registers

// Uint8Register is the register for the backing int
type Uint8Register uint8

// SetFromUint8 sets the 32 bit value held by this register.
func (register *Uint8Register) SetFromUint8(value uint8) {
	*register = Uint8Register(value)
}

// Uint8Value gets the value held by this register
func (register *Uint8Register) Uint8Value() uint8 {
	return uint8(*register)
}

// SetFromUint8 does nothing for the zero register.
func (register ZeroRegister) SetFromUint8(value uint8) {
}

// Uint8Value gets the value held by this register
func (register ZeroRegister) Uint8Value() uint8 {
	return 0
}

// Uint16Register is the register for the backing int
type Uint16Register uint16

// SetFromUint16 sets the 32 bit value held by this register.
func (register *Uint16Register) SetFromUint16(value uint16) {
	*register = Uint16Register(value)
}

// Uint16Value gets the value held by this register
func (register *Uint16Register) Uint16Value() uint16 {
	return uint16(*register)
}

// SetFromUint16 does nothing for the zero register.
func (register ZeroRegister) SetFromUint16(value uint16) {
}

// Uint16Value gets the value held by this register
func (register ZeroRegister) Uint16Value() uint16 {
	return 0
}

// Uint32Register is the register for the backing int
type Uint32Register uint32

// SetFromUint32 sets the 32 bit value held by this register.
func (register *Uint32Register) SetFromUint32(value uint32) {
	*register = Uint32Register(value)
}

// Uint32Value gets the value held by this register
func (register *Uint32Register) Uint32Value() uint32 {
	return uint32(*register)
}

// SetFromUint32 does nothing for the zero register.
func (register ZeroRegister) SetFromUint32(value uint32) {
}

// Uint32Value gets the value held by this register
func (register ZeroRegister) Uint32Value() uint32 {
	return 0
}

// Uint64Register is the register for the backing int
type Uint64Register uint64

// SetFromUint64 sets the 32 bit value held by this register.
func (register *Uint64Register) SetFromUint64(value uint64) {
	*register = Uint64Register(value)
}

// Uint64Value gets the value held by this register
func (register *Uint64Register) Uint64Value() uint64 {
	return uint64(*register)
}

// SetFromUint64 does nothing for the zero register.
func (register ZeroRegister) SetFromUint64(value uint64) {
}

// Uint64Value gets the value held by this register
func (register ZeroRegister) Uint64Value() uint64 {
	return 0
}

// Float32Register is the register for the backing int
type Float32Register float32

// SetFromFloat32 sets the 32 bit value held by this register.
func (register *Float32Register) SetFromFloat32(value float32) {
	*register = Float32Register(value)
}

// Float32Value gets the value held by this register
func (register *Float32Register) Float32Value() float32 {
	return float32(*register)
}

// SetFromFloat32 does nothing for the zero register.
func (register ZeroRegister) SetFromFloat32(value float32) {
}

// Float32Value gets the value held by this register
func (register ZeroRegister) Float32Value() float32 {
	return 0
}

// Float64Register is the register for the backing int
type Float64Register float64

// SetFromFloat64 sets the 32 bit value held by this register.
func (register *Float64Register) SetFromFloat64(value float64) {
	*register = Float64Register(value)
}

// Float64Value gets the value held by this register
func (register *Float64Register) Float64Value() float64 {
	return float64(*register)
}

// SetFromFloat64 does nothing for the zero register.
func (register ZeroRegister) SetFromFloat64(value float64) {
}

// Float64Value gets the value held by this register
func (register ZeroRegister) Float64Value() float64 {
	return 0
}
