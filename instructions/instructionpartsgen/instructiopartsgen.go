package main

import (
	"fmt"
	"os"
)

type codcwriter struct {
	f   *os.File
	err error
}

func (cw *codcwriter) write(format string, args ...interface{}) {
	if cw.err != nil {
		return
	}
	_, cw.err = cw.f.WriteString(fmt.Sprintf(format, args...))
}

func (cw *codcwriter) writeln(format string, args ...interface{}) {
	cw.write(format, args...)
	cw.write("\n")
}

func (cw *codcwriter) writeForSize(size uint, base uint) {
	signedVal := uint64(1) << (size - 1)
	unsingedVal := uint64(1) << size
	cw.writeln("// Int%v represents an signed %v bit integer.", size, size)
	cw.writeln("type Int%v int%v\n", size, base)
	cw.writeln("// Verify checks that value is in range of a %v bit signed integer", size)
	cw.writeln("func (value Int%v) Verify() bool {", size)
	cw.writeln("	return value < %v && value >= -%v", signedVal, signedVal)
	cw.writeln("}")
	cw.writeln("")
	cw.writeln("// Uint%v represents an unsigned %v bit integer.", size, size)
	cw.writeln("type Uint%v uint%v\n", size, base)
	cw.writeln("// Verify checks that value is in range of a %v bit unsigned integer", size)
	cw.writeln("func (value Uint%v) Verify() bool {", size)
	cw.writeln("	return value < %v", unsingedVal)
	cw.writeln("}")

}

// This file is tested via tests of the output
func main() {
	outputFile := os.Args[1]
	if len(os.Args) != 3 {
		_ = fmt.Errorf("Expected useage %v <output_file> <package>", os.Args[0])
		return
	}

	f, err := os.Create(outputFile)

	cw := &codcwriter{f: f, err: err}
	cw.writeln("//  This file was generated by instructionpartgen")
	cw.writeln("//  Changes will be overwritten when regenerated")
	cw.writeln("//  Generator is found at https://github.com/nolag/gocpu/tree/master/instructions/instructionpartgen")
	cw.writeln("")
	cw.writeln("package " + os.Args[2])

	sizes := []uint{8, 16, 32, 64}
	size := uint(2)
	for _, base := range sizes {
		for ; size < base; size++ {
			cw.writeForSize(size, base)
		}
	}

	if cw.err != nil {
		_ = fmt.Errorf("Error writing to file %s : %s", outputFile, cw.err)
	}
}
