package shared

import (
	"fmt"
	"os"
)

// SimpleWriter creates a simple way to write to files
type SimpleWriter struct {
	f   *os.File
	Err error
}

// CreateSimpleWriter creates an instance of the SimpleWriter
func CreateSimpleWriter(outputFile string) *SimpleWriter {
	f, err := os.Create(outputFile)
	return &SimpleWriter{f: f, Err: err}
}

// Close closes the backing file
func (sw *SimpleWriter) Close() {
	sw.f.Close()
}

// Write writes to the file, if no errors have occured yet
func (sw *SimpleWriter) Write(format string, args ...interface{}) {
	if sw.Err != nil {
		return
	}
	_, sw.Err = sw.f.WriteString(fmt.Sprintf(format, args...))
}

// Writeln writes to a file, followed by a newline ('\n') chacter
func (sw *SimpleWriter) Writeln(format string, args ...interface{}) {
	sw.Write(format, args...)
	sw.Write("\n")
}

// WriteGenHeader writes out the generated header notice
func (sw *SimpleWriter) WriteGenHeader(name string, repo string, pkg string) {
	sw.Write("//  This file was generated by ")
	sw.Writeln(name)
	sw.Writeln("//  Changes will be overwritten when regenerated")
	sw.Write("//  Generator is found at ")
	sw.Writeln(repo)
	sw.Writeln("")
	sw.Writeln("package " + pkg)
}
