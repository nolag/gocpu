// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package processor

import (
	"encoding/binary"

	"github.com/nolag/gocpu/memory"
	"github.com/nolag/gocpu/registers"
)

// FixedInstructionLenRunnerUint8 runs uint8 instructions one at a time, by calling InstructionRunnerUint8.
type FixedInstructionLenRunnerUint8 struct {
	memory.Memory
	binary.ByteOrder
	InstructionRunnerUint8
	Pc                        registers.ProgramCounter
	MemoryReadFailureCallback ErrorCallback
}

// Step runs the next instruction, returns error to indicate an unhandeled exception
func (cpu *FixedInstructionLenRunnerUint8) Step() error {
	i := instructionuint8(0)
	val, err := memory.ReadUint8(cpu.Memory, cpu.ByteOrder, cpu.Pc.ReadAsPc())

	if err != nil {
		callback := cpu.MemoryReadFailureCallback
		if callback != nil {
			err = cpu.MemoryReadFailureCallback(err)
		}

		return err
	}
	cpu.Pc.InrementAsPc(i.size())
	cpu.RunUint8(val)
	return nil
}
